# updates to lag quantity sold columns in the dates table
lag_query = (
    "WITH lag1 AS ("
    "SELECT d_day_total_qty_sold "
    "FROM dates "
    "WHERE sale_date = %(curr_date)s - 1) "
    "UPDATE dates "
    "SET d_day_total_qty_sold_1day_lag = lag1.d_day_total_qty_sold "
    "FROM lag1 "
    "WHERE sale_date = %(curr_date)s; "
    "WITH lag6 AS ("
    "SELECT d_day_total_qty_sold "
    "FROM dates "
    "WHERE sale_date = %(curr_date)s - 6) "
    "UPDATE dates "
    "SET d_day_total_qty_sold_6day_lag = lag6.d_day_total_qty_sold "
    "FROM lag6 "
    "WHERE sale_date = %(curr_date)s; "
    "WITH lag7 AS ("
    "SELECT d_day_total_qty_sold "
    "FROM dates "
    "WHERE sale_date = %(curr_date)s - 7) "
    "UPDATE dates "
    "SET d_day_total_qty_sold_7day_lag = lag7.d_day_total_qty_sold "
    "FROM lag7 "
    "WHERE sale_date = %(curr_date)s; "
)

# need to subset the item_ids in the test_data table to those "believed"
# to be on sale as of current day
# may need to add sale_date as a column to this new table
all_queries_str = (
    "DROP TABLE IF EXISTS id_new_day; "
    "CREATE TABLE id_new_day (item_id) AS "
    "SELECT DISTINCT item_id "
    "FROM test_data; "
    # add sale date column
    "ALTER TABLE id_new_day "
    "ADD COLUMN sale_date date; "
    "UPDATE id_new_day "
    "SET sale_date = %(curr_date)s; "
    # counts of sale dates
    "ALTER TABLE id_new_day "
    "ADD COLUMN id_item_cnt_sale_dts_before_day int default 0, "
    "ADD COLUMN id_item_cnt_sale_dts_last_7d smallint default 0, "
    "ADD COLUMN id_item_cnt_sale_dts_last_30d smallint default 0; "
    "UPDATE id_new_day nd "
    "SET id_item_cnt_sale_dts_before_day = csd.id_item_cnt_sale_dts_before_day, "
    "id_item_cnt_sale_dts_last_7d = csd.id_item_cnt_sale_dts_last_7d, "
    "id_item_cnt_sale_dts_last_30d = csd.id_item_cnt_sale_dts_last_30d "
    "FROM ("
    "SELECT item_id, count(sale_date) AS id_item_cnt_sale_dts_before_day, "
    "count(sale_date) FILTER (WHERE sale_date >= %(curr_date)s - 7) AS id_item_cnt_sale_dts_last_7d, "
    "count(sale_date) FILTER (WHERE sale_date >= %(curr_date)s - 30) AS id_item_cnt_sale_dts_last_30d "
    "FROM item_dates "
    "WHERE id_item_qty_sold_day > 0 "
    "GROUP BY item_id) csd "
    "WHERE nd.item_id = csd.item_id; "
    # quantity sold 1, 2, 3, 7 days ago
    "ALTER TABLE id_new_day "
    "ADD COLUMN id_item_qty_sold_1d_ago smallint default 0, "
    "ADD COLUMN id_item_qty_sold_2d_ago smallint default 0, "
    "ADD COLUMN id_item_qty_sold_3d_ago smallint default 0, "
    "ADD COLUMN id_item_qty_sold_7d_ago smallint default 0; "
    "UPDATE id_new_day nd "
    # coalesce should not be needed below as all items in test data should have a row
    # with 0 or greater than 0 quantity for these lookback windows,
    # unless an item only went on sale in the last few days of the train period,
    # but even then the default value of 0 would be sufficient
    "SET id_item_qty_sold_1d_ago = qty1.id_item_qty_sold_1d_ago "
    "FROM ("
    "SELECT item_id, id_item_qty_sold_day AS id_item_qty_sold_1d_ago "
    "FROM item_dates "
    "WHERE sale_date = %(curr_date)s - 1 "
    "GROUP BY item_id) qty1 "
    "WHERE nd.item_id = qty1.item_id; "
    "UPDATE id_new_day nd "
    "SET id_item_qty_sold_2d_ago = qty2.id_item_qty_sold_2d_ago "
    "FROM ("
    "SELECT item_id, id_item_qty_sold_day AS id_item_qty_sold_2d_ago "
    "FROM item_dates "
    "WHERE sale_date = %(curr_date)s - 2 "
    "GROUP BY item_id) qty2 "
    "WHERE nd.item_id = qty2.item_id; "
    "UPDATE id_new_day nd "
    "SET id_item_qty_sold_3d_ago = qty3.id_item_qty_sold_3d_ago "
    "FROM ("
    "SELECT item_id, id_item_qty_sold_day AS id_item_qty_sold_3d_ago "
    "FROM item_dates "
    "WHERE sale_date = %(curr_date)s - 3 "
    "GROUP BY item_id) qty3 "
    "WHERE nd.item_id = qty3.item_id; "
    "UPDATE id_new_day nd "
    "SET id_item_qty_sold_7d_ago = qty7.id_item_qty_sold_7d_ago "
    "FROM ("
    "SELECT item_id, id_item_qty_sold_day AS id_item_qty_sold_7d_ago "
    "FROM item_dates "
    "WHERE sale_date = %(curr_date)s - 7 "
    "GROUP BY item_id) qty7 "
    "WHERE nd.item_id = qty7.item_id; "
    # days since first and previous sale
    "ALTER TABLE id_new_day "
    "ADD COLUMN id_item_days_since_first_sale int default 0, "
    "ADD COLUMN id_item_days_since_prev_sale smallint default 0; "
    "UPDATE id_new_day nd "
    "SET id_item_days_since_first_sale = pd.id_item_days_since_first_sale, "
    "id_item_days_since_prev_sale = pd.id_item_days_since_prev_sale "
    "FROM ("
    "SELECT item_id, %(curr_date)s - min(sale_date) AS id_item_days_since_first_sale, "
    "%(curr_date)s - max(sale_date) FILTER (WHERE id_item_qty_sold_day > 0) AS id_item_days_since_prev_sale "
    "FROM item_dates "
    "GROUP BY item_id) pd "
    "WHERE nd.item_id = pd.item_id; "
    # first month and first week flags
    "ALTER TABLE id_new_day "
    "ADD COLUMN id_item_first_month smallint default 0, "
    "ADD COLUMN id_item_first_week smallint default 0; "
    "UPDATE id_new_day nd "
    "SET id_item_first_month = 1 WHERE id_item_days_since_first_sale <= 30; "
    "UPDATE id_new_day nd "
    "SET id_item_first_week = 1 WHERE id_item_days_since_first_sale <= 6; "
    # expanding quantity sold stats
    # if going to assign some quantity sold value to each first shop-item using
    # some sampling or modeling, need to then join those values onto the
    # id_new_day table by item_id (this applies to the 363 items not in train data)
    # and assign those values to these stats columns where they are left as nulls
    # after the join with items in item_dates
    "ALTER TABLE id_new_day "
    "ADD COLUMN id_item_expand_qty_max smallint default 0, "
    "ADD COLUMN id_item_expand_qty_mean real default 0, "
    "ADD COLUMN id_item_expand_qty_min smallint default 0, "
    "ADD COLUMN id_item_expand_qty_mode smallint default 0, "
    "ADD COLUMN id_item_expand_qty_median real default 0; "
    "UPDATE id_new_day nd "
    "SET id_item_expand_qty_max = eqs.id_item_expand_qty_max, "
    "id_item_expand_qty_mean = eqs.id_item_expand_qty_mean, "
    "id_item_expand_qty_min = eqs.id_item_expand_qty_min, "
    "id_item_expand_qty_mode = eqs.id_item_expand_qty_mode, "
    "id_item_expand_qty_median = eqs.id_item_expand_qty_median "
    "FROM ("
    "SELECT item_id, max(id_item_qty_sold_day) AS id_item_expand_qty_max, "
    "avg(id_item_qty_sold_day) AS id_item_expand_qty_avg, "
    "min(id_item_qty_sold_day) AS id_item_expand_qty_min, "
    "mode() WITHIN GROUP (ORDER BY id_item_qty_sold_day) AS id_item_expand_qty_mode, "
    "percentile_cont(0.5) WITHIN GROUP (ORDER BY id_item_qty_sold_day) AS id_item_expand_qty_median "
    "FROM item_dates "
    "GROUP BY item_id) eqs "
    "WHERE nd.item_id = eqs.item_id; "
    # gap between sales stats
    "ALTER TABLE id_new_day "
    "ADD COLUMN id_item_date_avg_gap_bw_sales real default 0, "
    "ADD COLUMN id_item_date_max_gap_bw_sales smallint default 0, "
    "ADD COLUMN id_item_date_min_gap_bw_sales smallint default 0, "
    "ADD COLUMN id_item_date_median_gap_bw_sales real default 0, "
    "ADD COLUMN id_item_date_mode_gap_bw_sales smallint default 0, "
    "ADD COLUMN id_item_date_std_gap_bw_sales real default 0; "
    "UPDATE id_new_day nd "
    "SET id_item_date_avg_gap_bw_sales = gbs.id_item_date_avg_gap_bw_sales, "
    "id_item_date_max_gap_bw_sales = gbs.id_item_date_max_gap_bw_sales, "
    "id_item_date_min_gap_bw_sales = gbs.id_item_date_min_gap_bw_sales, "
    "id_item_date_median_gap_bw_sales = gbs.id_item_date_median_gap_bw_sales, "
    "id_item_date_mode_gap_bw_sales = gbs.id_item_date_mode_gap_bw_sales, "
    "id_item_date_std_gap_bw_sales = gbs.id_item_date_std_gap_bw_sales "
    "FROM ("
    "SELECT item_id, avg(item_days_since_prev_sale_lmtd) AS id_item_date_avg_gap_bw_sales, "
    "max(item_days_since_prev_sale_lmtd) AS id_item_date_max_gap_bw_sales, "
    "min(item_days_since_prev_sale_lmtd) AS id_item_date_min_gap_bw_sales, "
    "percentile_cont(0.5) WITHIN GROUP (ORDER BY item_days_since_prev_sale_lmtd) AS id_item_date_median_gap_bw_sales, "
    "mode() WITHIN GROUP (ORDER BY item_days_since_prev_sale_lmtd) AS id_item_date_mode_gap_bw_sales, "
    "stddev_pop(item_days_since_prev_sale_lmtd) AS id_item_date_std_gap_bw_sales "
    "FROM ("
    "SELECT item_id, "
    "CASE WHEN id_item_qty_sold_day > 0 THEN id_item_days_since_prev_sale END "
    "AS item_days_since_prev_sale_lmtd "
    "FROM item_dates) t1 "
    "GROUP BY item_id) gbs "
    "WHERE nd.item_id = gbs.item_id; "
    # rolling 7-day quantity sold stats
    "ALTER TABLE id_new_day "
    "ADD COLUMN id_item_rolling_7d_avg_qty real default 0, "
    "ADD COLUMN id_item_rolling_7d_max_qty smallint default 0, "
    "ADD COLUMN id_item_rolling_7d_min_qty smallint default 0, "
    "ADD COLUMN id_item_rolling_7d_median_qty real default 0, "
    "ADD COLUMN id_item_rolling_7d_mode_qty smallint default 0; "
    "UPDATE id_new_day nd "
    "SET id_item_rolling_7d_avg_qty = rqs.id_item_rolling_7d_avg_qty, "
    "id_item_rolling_7d_max_qty = rqs.id_item_rolling_7d_max_qty, "
    "id_item_rolling_7d_min_qty = rqs.id_item_rolling_7d_min_qty, "
    "id_item_rolling_7d_median_qty = rqs.id_item_rolling_7d_median_qty, "
    "id_item_rolling_7d_mode_qty = rqs.id_item_rolling_7d_mode_qty "
    "FROM ("
    "SELECT item_id, avg(id_item_qty_sold_day) AS id_item_rolling_7d_avg_qty, "
    "max(id_item_qty_sold_day) AS id_item_rolling_7d_max_qty, "
    "min(id_item_qty_sold_day) AS id_item_rolling_7d_min_qty, "
    "percentile_cont(0.5) WITHIN GROUP (ORDER BY id_item_qty_sold_day) AS id_item_rolling_7d_median_qty, "
    "mode() WITHIN GROUP (ORDER BY id_item_qty_sold_day) AS id_item_rolling_7d_mode_qty "
    "FROM item_dates "
    "WHERE sale_date >= %(curr_date)s - 7 "
    "GROUP BY item_id) rqs "
    "WHERE nd.item_id = rqs.item_id; "
    # number of unique shops prior to day
    # in the train data, this column is 'float32', but it could be integer
    "ALTER TABLE id_new_day "
    "ADD COLUMN id_num_unique_shops_prior_to_day real default 0; "
    "UPDATE id_new_day nd "
    "SET id_num_unique_shops_prior_to_day = nus.id_num_unique_shops_prior_to_day "
    "FROM ("
    "SELECT item_id, COUNT(*) AS id_num_unique_shops_prior_to_day "
    "FROM ("
    "SELECT DISTINCT item_id, shop_id FROM shop_item_dates"
    ") t1 "
    "GROUP BY item_id) nus "
    "WHERE nd.item_id = nus.item_id; "
    # number of spikes before day
    "ALTER TABLE id_new_day "
    "ADD COLUMN id_item_n_spikes_before_day smallint default 0; "
    "UPDATE id_new_day nd "
    "SET id_item_n_spikes_before_day = sp.id_item_n_spikes_before_day "
    "FROM ("
    "SELECT all_id_qtys.item_id, "
    "sum(CASE WHEN all_id_qtys.id_item_qty_sold_day > item_stats.median_qty_sold + 2 "
    "* item_stats.std_qty_sold THEN 1 ELSE 0 END) AS id_item_n_spikes_before_day "
    "FROM (SELECT item_id, id_item_qty_sold_day FROM item_dates) all_id_qtys "
    "LEFT JOIN ("
    "SELECT item_id, "
    "percentile_cont(0.5) WITHIN GROUP (ORDER BY id_item_qty_sold_day) AS median_qty_sold, "
    "stddev_pop(id_item_qty_sold_day) AS std_qty_sold "
    "FROM item_dates "
    "WHERE id_item_qty_sold_day > 0 "
    "GROUP BY item_id) item_stats "
    "ON all_id_qtys.item_id = item_stats.item_id "
    "GROUP BY all_id_qtys.item_id) sp "
    "WHERE nd.item_id = sp.item_id; "
    # had a spike before day (default value is not needed below)
    "ALTER TABLE id_new_day "
    "ADD COLUMN id_item_had_spike_before_day smallint; "
    "UPDATE id_new_day nd "
    "SET id_item_had_spike_before_day = "
    "CASE WHEN id_item_n_spikes_before_day > 0 THEN 1 ELSE 0 END; "
    # last quantity sold
    "ALTER TABLE id_new_day "
    "ADD COLUMN id_item_last_qty_sold smallint default 0; "
    "UPDATE id_new_day nd "
    "SET id_item_last_qty_sold = lqs.id_item_last_qty_sold "
    "FROM ("
    "SELECT item_id, id_item_qty_sold_day AS id_item_last_qty_sold "
    "FROM item_dates "
    "WHERE (item_id, sale_date) IN ("
    "SELECT item_id, MAX(sale_date) "
    "FROM item_dates "
    "WHERE id_item_qty_sold_day <> 0 "
    "GROUP BY item_id)) lqs "
    "WHERE nd.item_id = lqs.item_id; "
    # expanding average demand interval (ADI)
    "ALTER TABLE id_new_day "
    "ADD COLUMN id_item_expanding_adi real default 0; "
    "UPDATE id_new_day "
    "SET id_item_expanding_adi = CASE id_item_cnt_sale_dts_before_day WHEN "
    "0 THEN 0 ELSE id_item_days_since_first_sale / "
    "CAST(id_item_cnt_sale_dts_before_day AS real) END; "
    # expanding CV2 of quantity sold
    "ALTER TABLE id_new_day "
    "ADD COLUMN id_expand_cv2_of_qty real default 0; "
    "UPDATE id_new_day nd "
    "SET id_expand_cv2_of_qty = cv.id_expand_cv2_of_qty "
    "FROM ("
    "SELECT item_id, power(stddev_pop(id_item_qty_sold_day) / avg(id_item_qty_sold_day), 2) "
    "AS id_expand_cv2_of_qty "
    "FROM item_dates "
    "WHERE id_item_qty_sold_day > 0 "
    "GROUP BY item_id) cv "
    "WHERE nd.item_id = cv.item_id; "
    # days since max quantity sold
    "ALTER TABLE id_new_day "
    "ADD COLUMN id_days_since_max_qty_sold int default 0; "
    "UPDATE id_new_day nd "
    "SET id_days_since_max_qty_sold = dsm.id_days_since_max_qty_sold "
    "FROM ("
    "SELECT item_id, %(curr_date)s - sale_date AS id_days_since_max_qty_sold "
    "FROM item_dates nd "
    "WHERE (item_id, id_item_qty_sold_day) IN ("
    "SELECT item_id, MAX(id_item_qty_sold_day) "
    "FROM item_dates "
    "GROUP BY item_id) dsm "
    "WHERE nd.item_id = dsm.item_id; "
    # difference between last and previous quantities sold
    "ALTER TABLE id_new_day "
    "ADD COLUMN id_item_date_diff_bw_last_and_prev_qty smallint default 0; "
    "WITH rns AS "
    "(SELECT item_id, id_item_qty_sold_day, "
    "row_number() OVER (PARTITION BY item_id ORDER BY sale_date DESC) AS rn "
    "FROM item_dates "
    "WHERE id_item_qty_sold_day <> 0), "
    "lq AS "
    "(SELECT item_id, id_item_qty_sold_day AS last_qty "
    "FROM rns "
    "WHERE rn = 1), "
    "pq AS "
    "(SELECT item_id, id_item_qty_sold_day AS prev_qty "
    "FROM rns "
    "WHERE rn = 2) "
    "UPDATE id_new_day nd "
    "SET id_item_date_diff_bw_last_and_prev_qty = dbq.id_item_date_diff_bw_last_and_prev_qty "
    "FROM ("
    "SELECT lq.item_id, "
    "COALESCE(lq.last_qty - pq.prev_qty, 0) AS id_item_date_diff_bw_last_and_prev_qty "
    "FROM lq LEFT JOIN pq ON lq.item_id = pq.item_id) dbq "
    "WHERE nd.item_id = dbq.item_id; "
    # category quantity sold last 7 days
    "ALTER TABLE id_new_day "
    "ADD COLUMN id_cat_qty_sold_last_7d smallint default 0; "
    "WITH ics AS "
    "(SELECT DISTINCT item_id, id_item_category_id "
    "FROM item_dates), "
    "cqs AS "
    "(SELECT id_item_category_id, "
    "sum(id_item_qty_sold_day) AS id_cat_qty_sold_last_7d "
    "FROM item_dates "
    "WHERE sale_date >= %(curr_date)s - 7 "
    "GROUP BY id_item_category_id) "
    "UPDATE id_new_day nd "
    "SET id_cat_qty_sold_last_7d = jt.id_cat_qty_sold_last_7d "
    "FROM ("
    "SELECT ics.item_id, COALESCE(cqs.id_cat_qty_sold_last_7d, 0) AS id_cat_qty_sold_last_7d "
    "FROM ics LEFT JOIN cqs "
    "ON ics.id_item_category_id = cqs.id_item_category_id) jt "
    "WHERE nd.item_id = jt.item_id; "
    # number of items with positive quantity sold in last 7 days, by category
    "ALTER TABLE id_new_day "
    "ADD COLUMN id_cat_unique_items_sold_last_7d int default 0; "
    "WITH ics AS "
    "(SELECT DISTINCT item_id, id_item_category_id "
    "FROM item_dates), "
    "cis AS "
    "(SELECT id_item_category_id, "
    "count(DISTINCT item_id) AS id_cat_unique_items_sold_last_7d "
    "FROM item_dates "
    "WHERE sale_date >= %(curr_date)s - 7 AND id_item_qty_sold_day > 0 "
    "GROUP BY id_item_category_id) "
    "UPDATE id_new_day nd "
    "SET id_cat_unique_items_sold_last_7d = jt.id_cat_unique_items_sold_last_7d "
    "FROM ("
    "SELECT ics.item_id, COALESCE(cis.id_cat_unique_items_sold_last_7d, 0) AS id_cat_unique_items_sold_last_7d "
    "FROM ics LEFT JOIN cis "
    "ON ics.id_item_category_id = cis.id_item_category_id) jt "
    "WHERE nd.item_id = jt.item_id; "
    # quantity sold per item in category in the last week
    "ALTER TABLE id_new_day "
    "ADD COLUMN id_cat_qty_sold_per_item_last_7d real default 0; "
    "UPDATE id_new_day "
    "SET id_cat_qty_sold_per_item_last_7d = CASE id_cat_unique_items_sold_last_7d WHEN "
    "0 THEN 0 ELSE id_cat_qty_sold_last_7d / "
    "CAST(id_cat_unique_items_sold_last_7d AS real) END; "
    # create table of unique shops in test data
    "DROP TABLE IF EXISTS sd_new_day; "
    "CREATE TABLE sd_new_day (shop_id) AS "
    "SELECT DISTINCT shop_id "
    "FROM test_data; "
    # add sale date column
    "ALTER TABLE sd_new_day "
    "ADD COLUMN sale_date date; "
    "UPDATE sd_new_day "
    "SET sale_date = %(curr_date)s; "
    # counts of sale dates
    "ALTER TABLE sd_new_day "
    "ADD COLUMN sd_shop_cnt_sale_dts_before_day int default 0, "
    "ADD COLUMN sd_shop_cnt_sale_dts_last_7d smallint default 0, "
    "ADD COLUMN sd_shop_cnt_sale_dts_last_30d smallint default 0; "
    "UPDATE sd_new_day nd "
    "SET sd_shop_cnt_sale_dts_before_day = csd.sd_shop_cnt_sale_dts_before_day, "
    "sd_shop_cnt_sale_dts_last_7d = csd.sd_shop_cnt_sale_dts_last_7d, "
    "sd_shop_cnt_sale_dts_last_30d = csd.sd_shop_cnt_sale_dts_last_30d "
    "FROM ("
    "SELECT shop_id, count(sale_date) AS sd_shop_cnt_sale_dts_before_day, "
    "count(sale_date) FILTER (WHERE sale_date >= %(curr_date)s - 7) AS sd_shop_cnt_sale_dts_last_7d, "
    "count(sale_date) FILTER (WHERE sale_date >= %(curr_date)s - 30) AS sd_shop_cnt_sale_dts_last_30d "
    "FROM shop_dates "
    "WHERE sd_shop_qty_sold_day > 0 "
    "GROUP BY shop_id) csd "
    "WHERE nd.shop_id = csd.shop_id; "
    # quantity sold 1, 2, 3, 7 days ago
    "ALTER TABLE sd_new_day "
    "ADD COLUMN sd_shop_qty_sold_1d_ago smallint default 0, "
    "ADD COLUMN sd_shop_qty_sold_2d_ago smallint default 0, "
    "ADD COLUMN sd_shop_qty_sold_3d_ago smallint default 0, "
    "ADD COLUMN sd_shop_qty_sold_7d_ago smallint default 0; "
    "UPDATE sd_new_day nd "
    # coalesce should not be needed below as all shops in test data should have a row
    # with 0 or greater than 0 quantity for these lookback windows,
    # unless a shop only began sales in the last few days of the train period,
    # but even then the default value of 0 would be sufficient
    "SET sd_shop_qty_sold_1d_ago = qty1.sd_shop_qty_sold_1d_ago "
    "FROM ("
    "SELECT shop_id, sd_shop_qty_sold_day AS sd_shop_qty_sold_1d_ago "
    "FROM shop_dates "
    "WHERE sale_date = %(curr_date)s - 1 "
    "GROUP BY shop_id) qty1 "
    "WHERE nd.shop_id = qty1.shop_id; "
    "UPDATE sd_new_day nd "
    "SET sd_shop_qty_sold_2d_ago = qty2.sd_shop_qty_sold_2d_ago "
    "FROM ("
    "SELECT shop_id, sd_shop_qty_sold_day AS sd_shop_qty_sold_2d_ago "
    "FROM shop_dates "
    "WHERE sale_date = %(curr_date)s - 2 "
    "GROUP BY shop_id) qty2 "
    "WHERE nd.shop_id = qty2.shop_id; "
    "UPDATE sd_new_day nd "
    "SET sd_shop_qty_sold_3d_ago = qty3.sd_shop_qty_sold_3d_ago "
    "FROM ("
    "SELECT shop_id, sd_shop_qty_sold_day AS sd_shop_qty_sold_3d_ago "
    "FROM shop_dates "
    "WHERE sale_date = %(curr_date)s - 3 "
    "GROUP BY shop_id) qty3 "
    "WHERE nd.shop_id = qty3.shop_id; "
    "UPDATE sd_new_day nd "
    "SET sd_shop_qty_sold_7d_ago = qty7.sd_shop_qty_sold_7d_ago "
    "FROM ("
    "SELECT shop_id, sd_shop_qty_sold_day AS sd_shop_qty_sold_7d_ago "
    "FROM shop_dates "
    "WHERE sale_date = %(curr_date)s - 7 "
    "GROUP BY shop_id) qty7 "
    "WHERE nd.shop_id = qty7.shop_id; "
    # days since first and previous sale
    "ALTER TABLE sd_new_day "
    "ADD COLUMN sd_shop_days_since_first_sale int default 0, "
    "ADD COLUMN sd_shop_days_since_prev_sale int default 0; "
    "UPDATE sd_new_day nd "
    "SET sd_shop_days_since_first_sale = pd.sd_shop_days_since_first_sale, "
    "sd_shop_days_since_prev_sale = pd.sd_shop_days_since_prev_sale "
    "FROM ("
    "SELECT shop_id, %(curr_date)s - min(sale_date) AS sd_shop_days_since_first_sale, "
    "%(curr_date)s - max(sale_date) FILTER (WHERE sd_shop_qty_sold_day > 0) AS sd_shop_days_since_prev_sale "
    "FROM shop_dates "
    "GROUP BY shop_id) pd "
    "WHERE nd.shop_id = pd.shop_id; "
    # first month and first week flags
    "ALTER TABLE sd_new_day "
    "ADD COLUMN sd_shop_first_month smallint default 0, "
    "ADD COLUMN sd_shop_first_week smallint default 0; "
    "UPDATE sd_new_day nd "
    "SET sd_shop_first_month = 1 WHERE sd_shop_days_since_first_sale <= 30; "
    "UPDATE sd_new_day nd "
    "SET sd_shop_first_week = 1 WHERE sd_shop_days_since_first_sale <= 6; "
    # expanding quantity sold stats
    "ALTER TABLE sd_new_day "
    "ADD COLUMN sd_shop_expand_qty_max int default 0, "
    "ADD COLUMN sd_shop_expand_qty_mean real default 0, "
    "ADD COLUMN sd_shop_expand_qty_min smallint default 0, "
    "ADD COLUMN sd_shop_expand_qty_mode int default 0, "
    "ADD COLUMN sd_shop_expand_qty_median real default 0; "
    "UPDATE sd_new_day nd "
    "SET sd_shop_expand_qty_max = eqs.sd_shop_expand_qty_max, "
    "sd_shop_expand_qty_mean = eqs.sd_shop_expand_qty_mean, "
    "sd_shop_expand_qty_min = eqs.sd_shop_expand_qty_min, "
    "sd_shop_expand_qty_mode = eqs.sd_shop_expand_qty_mode, "
    "sd_shop_expand_qty_median = eqs.sd_shop_expand_qty_median "
    "FROM ("
    "SELECT shop_id, max(sd_shop_qty_sold_day) AS sd_shop_expand_qty_max, "
    "avg(sd_shop_qty_sold_day) AS sd_shop_expand_qty_avg, "
    "min(sd_shop_qty_sold_day) AS sd_shop_expand_qty_min, "
    "mode() WITHIN GROUP (ORDER BY sd_shop_qty_sold_day) AS sd_shop_expand_qty_mode, "
    "percentile_cont(0.5) WITHIN GROUP (ORDER BY sd_shop_qty_sold_day) AS sd_shop_expand_qty_median "
    "FROM shop_dates "
    "GROUP BY shop_id) eqs "
    "WHERE nd.shop_id = eqs.shop_id; "
    # gap between sales stats
    "ALTER TABLE sd_new_day "
    "ADD COLUMN sd_shop_date_avg_gap_bw_sales real default 0, "
    "ADD COLUMN sd_shop_date_max_gap_bw_sales int default 0, "
    "ADD COLUMN sd_shop_date_min_gap_bw_sales smallint default 0, "
    "ADD COLUMN sd_shop_date_median_gap_bw_sales real default 0, "
    "ADD COLUMN sd_shop_date_mode_gap_bw_sales smallint default 0, "
    "ADD COLUMN sd_shop_date_std_gap_bw_sales real default 0; "
    "UPDATE sd_new_day nd "
    "SET sd_shop_date_avg_gap_bw_sales = gbs.sd_shop_date_avg_gap_bw_sales, "
    "sd_shop_date_max_gap_bw_sales = gbs.sd_shop_date_max_gap_bw_sales, "
    "sd_shop_date_min_gap_bw_sales = gbs.sd_shop_date_min_gap_bw_sales, "
    "sd_shop_date_median_gap_bw_sales = gbs.sd_shop_date_median_gap_bw_sales, "
    "sd_shop_date_mode_gap_bw_sales = gbs.sd_shop_date_mode_gap_bw_sales, "
    "sd_shop_date_std_gap_bw_sales = gbs.sd_shop_date_std_gap_bw_sales "
    "FROM ("
    "SELECT shop_id, avg(shop_days_since_prev_sale_lmtd) AS sd_shop_date_avg_gap_bw_sales, "
    "max(shop_days_since_prev_sale_lmtd) AS sd_shop_date_max_gap_bw_sales, "
    "min(shop_days_since_prev_sale_lmtd) AS sd_shop_date_min_gap_bw_sales, "
    "percentile_cont(0.5) WITHIN GROUP (ORDER BY shop_days_since_prev_sale_lmtd) AS sd_shop_date_median_gap_bw_sales, "
    "mode() WITHIN GROUP (ORDER BY shop_days_since_prev_sale_lmtd) AS sd_shop_date_mode_gap_bw_sales, "
    "stddev_pop(shop_days_since_prev_sale_lmtd) AS sd_shop_date_std_gap_bw_sales "
    "FROM ("
    "SELECT shop_id, "
    "CASE WHEN sd_shop_qty_sold_day > 0 THEN sd_shop_days_since_prev_sale END "
    "AS shop_days_since_prev_sale_lmtd "
    "FROM shop_dates) t1 "
    "GROUP BY shop_id) gbs "
    "WHERE nd.shop_id = gbs.shop_id; "
    # rolling 7-day quantity sold stats
    "ALTER TABLE sd_new_day "
    "ADD COLUMN sd_shop_rolling_7d_avg_qty real default 0, "
    "ADD COLUMN sd_shop_rolling_7d_max_qty int default 0, "
    "ADD COLUMN sd_shop_rolling_7d_min_qty smallint default 0, "
    "ADD COLUMN sd_shop_rolling_7d_median_qty real default 0, "
    "ADD COLUMN sd_shop_rolling_7d_mode_qty int default 0; "
    "UPDATE sd_new_day nd "
    "SET sd_shop_rolling_7d_avg_qty = rqs.sd_shop_rolling_7d_avg_qty, "
    "sd_shop_rolling_7d_max_qty = rqs.sd_shop_rolling_7d_max_qty, "
    "sd_shop_rolling_7d_min_qty = rqs.sd_shop_rolling_7d_min_qty, "
    "sd_shop_rolling_7d_median_qty = rqs.sd_shop_rolling_7d_median_qty, "
    "sd_shop_rolling_7d_mode_qty = rqs.sd_shop_rolling_7d_mode_qty "
    "FROM ("
    "SELECT shop_id, avg(sd_shop_qty_sold_day) AS sd_shop_rolling_7d_avg_qty, "
    "max(sd_shop_qty_sold_day) AS sd_shop_rolling_7d_max_qty, "
    "min(sd_shop_qty_sold_day) AS sd_shop_rolling_7d_min_qty, "
    "percentile_cont(0.5) WITHIN GROUP (ORDER BY sd_shop_qty_sold_day) AS sd_shop_rolling_7d_median_qty, "
    "mode() WITHIN GROUP (ORDER BY sd_shop_qty_sold_day) AS sd_shop_rolling_7d_mode_qty "
    "FROM shop_dates "
    "WHERE sale_date >= %(curr_date)s - 7 "
    "GROUP BY shop_id) rqs "
    "WHERE nd.shop_id = rqs.shop_id; "
    # number of unique items prior to day
    "ALTER TABLE sd_new_day "
    "ADD COLUMN sd_num_unique_items_prior_to_day int default 0; "
    "UPDATE sd_new_day nd "
    "SET sd_num_unique_items_prior_to_day = nui.sd_num_unique_items_prior_to_day "
    "FROM ("
    "SELECT shop_id, COUNT(*) AS sd_num_unique_items_prior_to_day "
    "FROM ("
    "SELECT DISTINCT shop_id, item_id FROM shop_item_dates"
    ") t1 "
    "GROUP BY shop_id) nui "
    "WHERE nd.shop_id = nui.shop_id; "
    # last quantity sold
    "ALTER TABLE sd_new_day "
    "ADD COLUMN sd_shop_last_qty_sold smallint default 0; "
    "UPDATE sd_new_day nd "
    "SET sd_shop_last_qty_sold = lqs.sd_shop_last_qty_sold "
    "FROM ("
    "SELECT shop_id, sd_shop_qty_sold_day AS sd_shop_last_qty_sold "
    "FROM shop_dates "
    "WHERE (shop_id, sale_date) IN ("
    "SELECT shop_id, MAX(sale_date) "
    "FROM shop_dates "
    "WHERE sd_shop_qty_sold_day <> 0 "
    "GROUP BY shop_id)) lqs "
    "WHERE nd.shop_id = lqs.shop_id; "
    # difference between last and previous quantities sold
    "ALTER TABLE sd_new_day "
    "ADD COLUMN sd_shop_date_diff_bw_last_and_prev_qty smallint default 0; "
    "WITH rns AS "
    "(SELECT shop_id, sd_shop_qty_sold_day, "
    "row_number() OVER (PARTITION BY shop_id ORDER BY sale_date DESC) AS rn "
    "FROM shop_dates "
    "WHERE sd_shop_qty_sold_day <> 0), "
    "lq AS "
    "(SELECT shop_id, sd_shop_qty_sold_day AS last_qty "
    "FROM rns "
    "WHERE rn = 1), "
    "pq AS "
    "(SELECT shop_id, sd_shop_qty_sold_day AS prev_qty "
    "FROM rns "
    "WHERE rn = 2) "
    "UPDATE sd_new_day nd "
    "SET sd_shop_date_diff_bw_last_and_prev_qty = dbq.sd_shop_date_diff_bw_last_and_prev_qty "
    "FROM ("
    "SELECT lq.shop_id, "
    "COALESCE(lq.last_qty - pq.prev_qty, 0) AS sd_shop_date_diff_bw_last_and_prev_qty "
    "FROM lq LEFT JOIN pq ON lq.shop_id = pq.shop_id) dbq "
    "WHERE nd.shop_id = dbq.shop_id; "
    # number of unique item categories sold prior to day
    "ALTER TABLE sd_new_day "
    "ADD COLUMN sd_num_unique_item_cats_prior_to_day smallint default 0; "
    "WITH icc AS "
    # "(SELECT shop_id, count(DISTINCT sid_item_category_id) AS sd_num_unique_item_cats_prior_to_day "
    # "FROM shop_item_dates "
    # "WHERE sid_shop_item_qty_sold_day <> 0 "
    # "GROUP BY shop_id) "
    "(SELECT shop_id, count(DISTINCT i_item_category_id) AS sd_num_unique_item_cats_prior_to_day "
    "FROM sales_cleaned "
    "LEFT JOIN items USING (item_id) "
    "GROUP BY shop_id) "
    "UPDATE sd_new_day nd "
    "SET sd_num_unique_item_cats_prior_to_day = icc.sd_num_unique_item_cats_prior_to_day "
    "FROM icc "
    "WHERE nd.shop_id = icc.shop_id; "
    # create table of unique shop-items in test data
    "DROP TABLE IF EXISTS sid_new_day; "
    "CREATE TABLE sid_new_day (shop_id, item_id) AS "
    "SELECT shop_id, item_id "
    "FROM test_data; "
    # add sale date column
    "ALTER TABLE sid_new_day "
    "ADD COLUMN sale_date date; "
    "UPDATE sid_new_day "
    "SET sale_date = %(curr_date)s; "
    # counts of sale dates
    "ALTER TABLE sid_new_day "
    "ADD COLUMN sid_shop_item_cnt_sale_dts_before_day int default 0, "
    "ADD COLUMN sid_shop_item_cnt_sale_dts_last_7d smallint default 0, "
    "ADD COLUMN sid_shop_item_cnt_sale_dts_last_30d smallint default 0; "
    "UPDATE sid_new_day nd "
    "SET sid_shop_item_cnt_sale_dts_before_day = csd.sid_shop_item_cnt_sale_dts_before_day, "
    "sid_shop_item_cnt_sale_dts_last_7d = csd.sid_shop_item_cnt_sale_dts_last_7d, "
    "sid_shop_item_cnt_sale_dts_last_30d = csd.sid_shop_item_cnt_sale_dts_last_30d "
    "FROM ("
    "SELECT shop_id, item_id, count(sale_date) AS sid_shop_item_cnt_sale_dts_before_day, "
    "count(sale_date) FILTER (WHERE sale_date >= %(curr_date)s - 7) AS sid_shop_item_cnt_sale_dts_last_7d, "
    "count(sale_date) FILTER (WHERE sale_date >= %(curr_date)s - 30) AS sid_shop_item_cnt_sale_dts_last_30d "
    # "FROM shop_item_dates "
    # "WHERE sid_shop_item_qty_sold_day > 0 "
    "FROM sales_cleaned "
    "WHERE item_cnt_day > 0 "
    "GROUP BY shop_id, item_id) csd "
    "WHERE nd.shop_id = csd.shop_id AND nd.item_id = csd.item_id; "
    # quantity sold 1, 2, 3, 7 days ago
    "ALTER TABLE sid_new_day "
    "ADD COLUMN sid_shop_item_qty_sold_1d_ago smallint default 0, "
    "ADD COLUMN sid_shop_item_qty_sold_2d_ago smallint default 0, "
    "ADD COLUMN sid_shop_item_qty_sold_3d_ago smallint default 0, "
    "ADD COLUMN sid_shop_item_qty_sold_7d_ago smallint default 0; "
    "UPDATE sid_new_day nd "
    # coalesce should not be needed below as all non-new shop-items in test data should have a row
    # with 0 or greater than 0 quantity for these lookback windows,
    # unless a shop-item only began sales in the last few days of the train period,
    # but even then the default value of 0 would be sufficient
    "SET sid_shop_item_qty_sold_1d_ago = qty1.sid_shop_item_qty_sold_1d_ago "
    "FROM ("
    "SELECT shop_id, item_id, sid_shop_item_qty_sold_day AS sid_shop_item_qty_sold_1d_ago "
    "FROM shop_item_dates "
    "WHERE sale_date = %(curr_date)s - 1 "
    "GROUP BY shop_id, item_id) qty1 "
    "WHERE nd.shop_id = qty1.shop_id AND nd.item_id = qty1.item_id; "
    "UPDATE sid_new_day nd "
    "SET sid_shop_item_qty_sold_2d_ago = qty2.sid_shop_item_qty_sold_2d_ago "
    "FROM ("
    "SELECT shop_id, item_id, sid_shop_item_qty_sold_day AS sid_shop_item_qty_sold_2d_ago "
    "FROM shop_item_dates "
    "WHERE sale_date = %(curr_date)s - 2 "
    "GROUP BY shop_id, item_id) qty2 "
    "WHERE nd.shop_id = qty2.shop_id AND nd.item_id = qty2.item_id; "
    "UPDATE sid_new_day nd "
    "SET sid_shop_item_qty_sold_3d_ago = qty3.sid_shop_item_qty_sold_3d_ago "
    "FROM ("
    "SELECT shop_id, item_id, sid_shop_item_qty_sold_day AS sid_shop_item_qty_sold_3d_ago "
    "FROM shop_item_dates "
    "WHERE sale_date = %(curr_date)s - 3 "
    "GROUP BY shop_id, item_id) qty3 "
    "WHERE nd.shop_id = qty3.shop_id AND nd.item_id = qty3.item_id; "
    "UPDATE sid_new_day nd "
    "SET sid_shop_item_qty_sold_7d_ago = qty7.sid_shop_item_qty_sold_7d_ago "
    "FROM ("
    "SELECT shop_id, item_id, sid_shop_item_qty_sold_day AS sid_shop_item_qty_sold_7d_ago "
    "FROM shop_item_dates "
    "WHERE sale_date = %(curr_date)s - 7 "
    "GROUP BY shop_id, item_id) qty7 "
    "WHERE nd.shop_id = qty7.shop_id AND nd.item_id = qty7.item_id; "
    # days since first and previous sale
    "ALTER TABLE sid_new_day "
    "ADD COLUMN sid_shop_item_days_since_first_sale int default 0, "
    "ADD COLUMN sid_shop_item_days_since_prev_sale smallint default 0; "
    "UPDATE sid_new_day nd "
    "SET sid_shop_item_days_since_first_sale = pd.sid_shop_item_days_since_first_sale, "
    "sid_shop_item_days_since_prev_sale = pd.sid_shop_item_days_since_prev_sale "
    "FROM ("
    # "SELECT shop_id, item_id, "
    # "%(curr_date)s - min(sale_date) FILTER (WHERE sid_shop_item_qty_sold_day > 0) AS sid_shop_item_days_since_first_sale, "
    # "%(curr_date)s - max(sale_date) FILTER (WHERE sid_shop_item_qty_sold_day > 0) AS sid_shop_item_days_since_prev_sale "
    # "FROM shop_item_dates "
    # "GROUP BY shop_id, item_id) pd "
    "SELECT shop_id, item_id, "
    "%(curr_date)s - min(sale_date) AS sid_shop_item_days_since_first_sale, "
    "%(curr_date)s - max(sale_date) AS sid_shop_item_days_since_prev_sale "
    "FROM sales_cleaned "
    "WHERE item_cnt_day > 0 "
    "GROUP BY shop_id, item_id) pd "
    "WHERE nd.shop_id = pd.shop_id AND nd.item_id = pd.item_id; "
    # first month and first week flags
    "ALTER TABLE sid_new_day "
    "ADD COLUMN sid_shop_item_first_month smallint default 0, "
    "ADD COLUMN sid_shop_item_first_week smallint default 0; "
    "UPDATE sid_new_day nd "
    "SET sid_shop_item_first_month = 1 WHERE sid_shop_item_days_since_first_sale <= 30; "
    "UPDATE sid_new_day nd "
    "SET sid_shop_item_first_week = 1 WHERE sid_shop_item_days_since_first_sale <= 6; "
    # expanding quantity sold stats
    # if going to assign some quantity sold value to each first shop-item using
    # some sampling or modeling, need to then join those values onto the
    # sid_new_day table by shop_id-item_id (this applies to the 363 items not in train data)
    # and assign those values to these stats columns where they are left as nulls
    # after the join with shop-items in shop_item_dates
    "ALTER TABLE sid_new_day "
    "ADD COLUMN sid_shop_item_expand_qty_max smallint default 0, "
    "ADD COLUMN sid_shop_item_expand_qty_mean real default 0, "
    "ADD COLUMN sid_shop_item_expand_qty_min smallint default 0, "
    "ADD COLUMN sid_shop_item_expand_qty_mode smallint default 0, "
    "ADD COLUMN sid_shop_item_expand_qty_median real default 0; "
    "UPDATE sid_new_day nd "
    "SET sid_shop_item_expand_qty_max = eqs.sid_shop_item_expand_qty_max, "
    "sid_shop_item_expand_qty_mean = eqs.sid_shop_item_expand_qty_mean, "
    "sid_shop_item_expand_qty_min = eqs.sid_shop_item_expand_qty_min, "
    "sid_shop_item_expand_qty_mode = eqs.sid_shop_item_expand_qty_mode, "
    "sid_shop_item_expand_qty_median = eqs.sid_shop_item_expand_qty_median "
    "FROM ("
    "SELECT shop_id, item_id, max(sid_shop_item_qty_sold_day) AS sid_shop_item_expand_qty_max, "
    "avg(sid_shop_item_qty_sold_day) AS sid_shop_item_expand_qty_avg, "
    "min(sid_shop_item_qty_sold_day) AS sid_shop_item_expand_qty_min, "
    "mode() WITHIN GROUP (ORDER BY sid_shop_item_qty_sold_day) AS sid_shop_item_expand_qty_mode, "
    "percentile_cont(0.5) WITHIN GROUP (ORDER BY sid_shop_item_qty_sold_day) AS sid_shop_item_expand_qty_median "
    "FROM shop_item_dates "
    "GROUP BY shop_id, item_id) eqs "
    "WHERE nd.shop_id = eqs.shop_id AND nd.item_id = eqs.item_id; "
    # gap between sales stats
    "ALTER TABLE sid_new_day "
    "ADD COLUMN sid_shop_item_date_avg_gap_bw_sales real default 0, "
    "ADD COLUMN sid_shop_item_date_max_gap_bw_sales int default 0, "
    "ADD COLUMN sid_shop_item_date_min_gap_bw_sales int default 0, "
    "ADD COLUMN sid_shop_item_date_median_gap_bw_sales real default 0, "
    "ADD COLUMN sid_shop_item_date_mode_gap_bw_sales int default 0, "
    "ADD COLUMN sid_shop_item_date_std_gap_bw_sales real default 0; "
    "UPDATE sid_new_day nd "
    "SET sid_shop_item_date_avg_gap_bw_sales = gbs.sid_shop_item_date_avg_gap_bw_sales, "
    "sid_shop_item_date_max_gap_bw_sales = gbs.sid_shop_item_date_max_gap_bw_sales, "
    "sid_shop_item_date_min_gap_bw_sales = gbs.sid_shop_item_date_min_gap_bw_sales, "
    "sid_shop_item_date_median_gap_bw_sales = gbs.sid_shop_item_date_median_gap_bw_sales, "
    "sid_shop_item_date_mode_gap_bw_sales = gbs.sid_shop_item_date_mode_gap_bw_sales, "
    "sid_shop_item_date_std_gap_bw_sales = gbs.sid_shop_item_date_std_gap_bw_sales "
    "FROM ("
    "SELECT shop_id, item_id, avg(shop_item_days_since_prev_sale_lmtd) AS sid_shop_item_date_avg_gap_bw_sales, "
    "max(shop_days_since_prev_sale_lmtd) AS sid_shop_item_date_max_gap_bw_sales, "
    "min(shop_days_since_prev_sale_lmtd) AS sid_shop_item_date_min_gap_bw_sales, "
    "percentile_cont(0.5) WITHIN GROUP (ORDER BY shop_days_since_prev_sale_lmtd) AS sid_shop_item_date_median_gap_bw_sales, "
    "mode() WITHIN GROUP (ORDER BY shop_days_since_prev_sale_lmtd) AS sid_shop_item_date_mode_gap_bw_sales, "
    "stddev_pop(shop_days_since_prev_sale_lmtd) AS sid_shop_item_date_std_gap_bw_sales "
    "FROM ("
    "SELECT shop_id, item_id, "
    "CASE WHEN sid_shop_item_qty_sold_day > 0 THEN sid_shop_item_days_since_prev_sale END "
    "AS shop_item_days_since_prev_sale_lmtd "
    "FROM shop_item_dates) t1 "
    "GROUP BY shop_id, item_id) gbs "
    "WHERE nd.shop_id = gbs.shop_id AND nd.item_id = gbs.item_id; "
    # rolling 7-day quantity sold stats
    "ALTER TABLE sid_new_day "
    "ADD COLUMN sid_shop_item_rolling_7d_avg_qty real default 0, "
    "ADD COLUMN sid_shop_item_rolling_7d_max_qty smallint default 0, "
    "ADD COLUMN sid_shop_item_rolling_7d_min_qty smallint default 0, "
    "ADD COLUMN sid_shop_item_rolling_7d_median_qty real default 0, "
    "ADD COLUMN sid_shop_item_rolling_7d_mode_qty smallint default 0; "
    "UPDATE sid_new_day nd "
    "SET sid_shop_item_rolling_7d_avg_qty = rqs.sid_shop_item_rolling_7d_avg_qty, "
    "sid_shop_item_rolling_7d_max_qty = rqs.sid_shop_item_rolling_7d_max_qty, "
    "sid_shop_item_rolling_7d_min_qty = rqs.sid_shop_item_rolling_7d_min_qty, "
    "sid_shop_item_rolling_7d_median_qty = rqs.sid_shop_item_rolling_7d_median_qty, "
    "sid_shop_item_rolling_7d_mode_qty = rqs.sid_shop_item_rolling_7d_mode_qty "
    "FROM ("
    "SELECT shop_id, item_id, avg(sid_shop_item_qty_sold_day) AS sid_shop_item_rolling_7d_avg_qty, "
    "max(sid_shop_item_qty_sold_day) AS sid_shop_item_rolling_7d_max_qty, "
    "min(sid_shop_item_qty_sold_day) AS sid_shop_item_rolling_7d_min_qty, "
    "percentile_cont(0.5) WITHIN GROUP (ORDER BY sid_shop_item_qty_sold_day) AS sid_shop_item_rolling_7d_median_qty, "
    "mode() WITHIN GROUP (ORDER BY sid_shop_item_qty_sold_day) AS sid_shop_item_rolling_7d_mode_qty "
    "FROM shop_item_dates "
    "WHERE sale_date >= %(curr_date)s - 7 "
    "GROUP BY shop_id, item_id) rqs "
    "WHERE nd.shop_id = rqs.shop_id AND nd.item_id = rqs.item_id; "
    # last quantity sold
    "ALTER TABLE sid_new_day "
    "ADD COLUMN sid_shop_item_last_qty_sold smallint default 0; "
    "UPDATE sid_new_day nd "
    "SET sid_shop_item_last_qty_sold = lqs.sid_shop_item_last_qty_sold "
    "FROM ("
    # "SELECT shop_id, item_id, sid_shop_item_qty_sold_day AS sid_shop_item_last_qty_sold "
    # "FROM shop_item_dates "
    # "WHERE (shop_id, item_id, sale_date) IN ("
    # "SELECT shop_id, item_id, MAX(sale_date) "
    # "FROM shop_item_dates "
    # "WHERE sid_shop_item_qty_sold_day <> 0 "
    # "GROUP BY shop_id, item_id)) lqs "
    "SELECT shop_id, item_id, item_cnt_day AS sid_shop_item_last_qty_sold "
    "FROM sales_cleaned "
    "WHERE (shop_id, item_date, sale_date) IN ("
    "SELECT shop_id, item_id, MAX(sale_date) "
    "FROM sales_cleaned "
    "GROUP BY shop_id, item_id)) lqs "
    "WHERE nd.shop_id = lqs.shop_id AND nd.item_id = lqs.item_id; "
    # expanding average demand interval (ADI)
    "ALTER TABLE sid_new_day "
    "ADD COLUMN sid_shop_item_expanding_adi real default 0; "
    "UPDATE sid_new_day "
    "SET sid_shop_item_expanding_adi = CASE sid_shop_item_cnt_sale_dts_before_day WHEN "
    "0 THEN 0 ELSE sid_shop_item_days_since_first_sale / "
    "CAST(sid_shop_item_cnt_sale_dts_before_day AS real) END; "
    # expanding CV2 of quantity sold
    "ALTER TABLE sid_new_day "
    "ADD COLUMN sid_expand_cv2_of_qty real default 0; "
    "UPDATE sid_new_day nd "
    "SET sid_expand_cv2_of_qty = cv.sid_expand_cv2_of_qty "
    "FROM ("
    # "SELECT shop_id, item_id, "
    # "power(stddev_pop(sid_shop_item_qty_sold_day) / avg(sid_shop_item_qty_sold_day), 2) "
    # "AS sid_expand_cv2_of_qty "
    # "FROM shop_item_dates "
    # "WHERE sid_shop_item_qty_sold_day > 0 "
    # "GROUP BY shop_id, item_id) cv "
    "SELECT shop_id, item_id, "
    "power(stddev_pop(item_cnt_day) / avg(item_cnt_day), 2) "
    "AS sid_expand_cv2_of_qty "
    "FROM sales_cleaned "
    "WHERE item_cnt_day > 0 "
    "GROUP BY shop_id, item_id) cv "
    "WHERE nd.shop_id = cv.shop_id AND nd.item_id = cv.item_id; "
    # days since max quantity sold
    "ALTER TABLE sid_new_day "
    "ADD COLUMN sid_days_since_max_qty_sold int default 0; "
    "UPDATE sid_new_day nd "
    "SET sid_days_since_max_qty_sold = dsm.sid_days_since_max_qty_sold "
    "FROM ("
    "SELECT shop_id, item_id, %(curr_date)s - sale_date AS sid_days_since_max_qty_sold "
    "FROM shop_item_dates nd "
    "WHERE (shop_id, item_id, sid_shop_item_qty_sold_day) IN ("
    "SELECT shop_id, item_id, MAX(sid_shop_item_qty_sold_day) "
    "FROM shop_item_dates "
    "GROUP BY shop_id, item_id) dsm "
    "WHERE nd.shop_id = dsm.shop_id AND nd.item_id = dsm.item_id; "
    # difference between last and previous quantities sold
    "ALTER TABLE sid_new_day "
    "ADD COLUMN sid_shop_item_date_diff_bw_last_and_prev_qty smallint default 0; "
    "WITH rns AS "
    # "(SELECT shop_id, item_id, sid_shop_item_qty_sold_day, "
    # "row_number() OVER (PARTITION BY shop_id, item_id ORDER BY sale_date DESC) AS rn "
    # "FROM shop_item_dates "
    # "WHERE sid_shop_item_qty_sold_day <> 0), "
    "(SELECT shop_id, item_id, item_cnt_day AS sid_shop_item_qty_sold_day, "
    "row_number() OVER (PARTITION BY shop_id, item_id ORDER BY sale_date DESC) AS rn "
    "FROM sales_cleaned), "
    "lq AS "
    "(SELECT shop_id, item_id, sid_shop_item_qty_sold_day AS last_qty "
    "FROM rns "
    "WHERE rn = 1), "
    "pq AS "
    "(SELECT shop_id, item_id, sid_shop_item_qty_sold_day AS prev_qty "
    "FROM rns "
    "WHERE rn = 2) "
    "UPDATE sid_new_day nd "
    "SET sid_shop_item_date_diff_bw_last_and_prev_qty = dbq.sid_shop_item_date_diff_bw_last_and_prev_qty "
    "FROM ("
    "SELECT lq.shop_id, lq.item_id, "
    "COALESCE(lq.last_qty - pq.prev_qty, 0) AS sid_shop_item_date_diff_bw_last_and_prev_qty "
    "FROM lq LEFT JOIN pq ON lq.shop_id = pq.shop_id AND lq.item_id = pq.item_id) dbq "
    "WHERE nd.shop_id = dbq.shop_id AND nd.item_id = dbq.item_id; "
    # expanding Mean Absolute Deviation of Quantity Sold across dates with a sale for each shop-item
    # in Python: np.mean(np.absolute(data - np.mean(data, axis)), axis)
    "ALTER TABLE sid_new_day "
    "ADD COLUMN sid_qty_mean_abs_dev real default 0; "
    "WITH abs_devs AS ("
    # "SELECT shop_id, item_id, "
    # "abs(sid_shop_item_qty_sold_day - avg(sid_shop_item_qty_sold_day) "
    # "OVER (PARTITION BY shop_id, item_id)) "
    # "AS qty_abs_dev_from_mean "
    # "FROM shop_item_dates "
    # "WHERE sid_shop_item_qty_sold_day <> 0), "
    "SELECT shop_id, item_id, "
    "abs(item_cnt_day - avg(item_cnt_day) "
    "OVER (PARTITION BY shop_id, item_id)) "
    "AS qty_abs_dev_from_mean "
    "FROM sales_cleaned), "
    "mads AS ("
    "SELECT shop_id, item_id, avg(qty_abs_dev_from_mean) AS sid_qty_mean_abs_dev "
    "FROM abs_devs "
    "GROUP BY shop_id, item_id) "
    "UPDATE sid_new_day nd "
    "SET sid_qty_mean_abs_dev = mads.sid_qty_mean_abs_dev "
    "FROM mads "
    "WHERE nd.shop_id = mads.shop_id AND nd.item_id = mads.item_id; "
    # expanding Median Absolute Deviation of Quantity Sold across dates with a sale for each shop-item
    # median of absolute deviations from the median
    #  'sid_qty_median_abs_dev': 'float32',
    "ALTER TABLE sid_new_day "
    "ADD COLUMN sid_qty_median_abs_dev real default 0; "
    "WITH medians AS ("
    # "SELECT shop_id, item_id, "
    # "percentile_cont(0.5) WITHIN GROUP (ORDER BY sid_shop_item_qty_sold_day) as p_50 "
    # "FROM shop_item_dates "
    # "WHERE sid_shop_item_qty_sold_day <> 0 "
    # "GROUP BY shop_id, item_id), "
    "SELECT shop_id, item_id, "
    "percentile_cont(0.5) WITHIN GROUP (ORDER BY item_cnt_day) as p_50 "
    "FROM sales_cleaned "
    "GROUP BY shop_id, item_id), "
    "abs_devs AS ("
    "SELECT shop_id, item_id, "
    "abs(sid_shop_item_qty_sold_day - p_50) as abs_dev_from_median "
    "FROM shop_item_dates "
    "INNER JOIN medians USING (shop_id, item_id)), "
    "meds AS ("
    "SELECT shop_id, item_id "
    "percentile_cont(0.5) WITHIN GROUP (ORDER BY abs_dev_from_median) "
    "AS sid_qty_median_abs_dev "
    "FROM abs_devs "
    "GROUP BY shop_id, item_id) "
    "UPDATE sid_new_day nd "
    "SET sid_qty_median_abs_dev = meds.sid_qty_median_abs_dev "
    "FROM meds "
    "WHERE nd.shop_id = meds.shop_id AND nd.item_id = meds.item_id; "
    # expanding coefficient of variation of price across dates with a sale for each shop-item
    # coef of varation: ratio of the biased standard deviation (ddof=0) to the mean
    # IS IT POSSIBLE FOR AN ITEM TO BE ASSOCIATED WITH A NEW SHOP IN THE TEST PERIOD??? YES
    # FOR NEW SHOP-ITEMS:
    # need to investigate values of this feature by category-day following first day
    # that an item goes on sale (i.e., from day 2 through day 30)
    # FOR EXISTING SHOP-ITEMS IN TEST PERIOD:
    # continue to query sales_cleaned and use the same coef_var_price for all
    # days during the test period (NOT HAVING KNOWLEDGE OF THEIR PRICE)
    # (COULD ALSO ASSUME THE SAME PRICE AS THE LAST PRICE DURING THE TRAIN
    # PERIOD AND CALCULATE NEW coef_var_price, THOUGH THAT WOULD INVOLVE MORE STEPS)
    # "ALTER TABLE sid_new_day "
    # "ADD COLUMN sid_coef_var_price real default 0; "
    # "WITH cvp AS ("
    # "SELECT shop_id, item_id, "
    # "stddev_pop(item_price) / avg(item_price) AS sid_coef_var_price "
    # "FROM sales_cleaned "
    # "GROUP BY shop_id, item_id) "
    # "UPDATE sid_new_day nd "
    # "SET sid_coef_var_price = cvp.sid_coef_var_price "
    # "FROM cvp "
    # "WHERE nd.shop_id = cvp.shop_id AND nd.item_id = cvp.item_id; "
    # binary flag indicating whether shop sold an item in same item category before current day
    #  'sid_cat_sold_at_shop_before_day_flag': 'int16',
    # create shop-category table from shop_item_dates table,
    # subsetting to HAVING total quantity sold <> 0
    # create new column in sid_new_day table, with default value of 0
    # update the column by joining sid_new_day with the shop-category table on shop_id, sid_item_category_id
    "ALTER TABLE sid_new_day "
    "ADD COLUMN sid_cat_sold_at_shop_before_day_flag smallint default 0; "
    "WITH scq AS ("
    "SELECT shop_id, sid_item_category_id, "
    "sum(sid_shop_item_qty_sold_day) AS total_qty "
    "FROM shop_item_dates "
    "GROUP BY shop_id, sid_item_category_id "
    "HAVING sum(sid_shop_item_qty_sold_day) <> 0) "
    "UPDATE sid_new_day nd "
    "SET sid_cat_sold_at_shop_before_day_flag = 1 "
    "FROM scq "
    "WHERE nd.shop_id = scq.shop_id AND nd.sid_item_category_id = scq.sid_item_category_id; "
    # 'sid_shop_cat_qty_sold_last_7d' : 'int16', (this int16 value is based on smallint type of PSQL column)
    "ALTER TABLE sid_new_day "
    "ADD COLUMN sid_shop_cat_qty_sold_last_7d smallint default 0; "
    "WITH scq AS ("
    "SELECT shop_id, sid_item_category_id, "
    "sum(sid_shop_item_qty_sold_day) AS sid_shop_cat_qty_sold_last_7d "
    "FROM shop_item_dates "
    "WHERE sale_date >= %(curr_date)s - 7 "
    "GROUP BY shop_id, sid_item_category_id) "
    "UPDATE sid_new_day nd "
    "SET sid_shop_cat_qty_sold_last_7d = scq.sid_shop_cat_qty_sold_last_7d "
    "FROM scq "
    "WHERE nd.shop_id = scq.shop_id AND nd.sid_item_category_id = scq.sid_item_category_id; "
    # add feature counting days since “first day of availability of item at shop”
    # (days since the LATTER OF the first day the item was sold anywhere AND the
    # first day that the shop sold any item)
    "ALTER TABLE sid_new_day "
    "ADD COLUMN sid_days_since_available smallint default 0; "
    # add the last counter value from shop_item_dates table to every non-new
    # shop-item in the sid_new_day table and add 1 to make the counter continuous
    "WITH ldav AS ("
    "SELECT shop_id, item_id, max(sid_days_since_available) AS last_days_avail_value "
    "FROM shop_item_dates "
    "GROUP BY shop_id, item_id) "
    "UPDATE sid_new_day snd "
    "SET sid_days_since_available = sid_days_since_available + last_days_avail_value + 1 "
    "FROM ldav "
    "WHERE snd.shop_id = ldav.shop_id AND snd.item_id = ldav.item_id; "
)
